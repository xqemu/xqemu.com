{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"XQEMU is an open-source, cross-platform, low-level system emulator for the original Xbox and Sega Chihiro, built on the excellent QEMU project. XQEMU isn't very usable right now. If you're not a developer you probably instead want to take a look at xemu , a fork of XQEMU which makes different accuracy tradeoffs but has much better performance as-is. Attention This project is still early in development. At this point, the intended user is a developer who is capable of acquiring the necessary ROM images, and compiling the project from sources. Project Status \u00b6 Audio does not work, and graphics are slow and buggy, but progress is being made! Please visit the issues page on GitHub for the current open and active tasks. Check out the screenshots to see the current state of things, or click here to get started running XQEMU! Developers \u00b6 If you are interested in helping to improve XQEMU, you are most welcome to contribute! There are opportunities for people of all skill levels to contribute. Check out Developers for more information on how to get started.","title":"Welcome"},{"location":"#project-status","text":"Audio does not work, and graphics are slow and buggy, but progress is being made! Please visit the issues page on GitHub for the current open and active tasks. Check out the screenshots to see the current state of things, or click here to get started running XQEMU!","title":"Project Status"},{"location":"#developers","text":"If you are interested in helping to improve XQEMU, you are most welcome to contribute! There are opportunities for people of all skill levels to contribute. Check out Developers for more information on how to get started.","title":"Developers"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 Q: Are there system requirements? \u00b6 There are not strict requirements, except that your graphics card should have a driver that supports OpenGL 3.3 core profile (or better). Most relatively modern laptops and desktops should be able to run XQEMU. XQEMU runs on all major operating systems. Please be aware that XQEMU has significant performance issues right now that are actively being addressed. Even with the best hardware, the master build runs very poorly. This will be fixed soon. Q: Is there a GUI? \u00b6 Yes, please use XQEMU-Manager . Q: How can I get the [xxx] build? \u00b6 Developers may have experimental builds including exciting new features or bug fixes in their own repositories. While your testing is welcome, these are considired unofficial, experimental builds. For this reason, we do not link to them directly from the site, to avoid confusion. Q: What BIOS do I need to use? \u00b6 Your MCPX and BIOS dump should be for a 1.0 Xbox. It's suggested that your MCPX dump be 1.0 and that a compatible BIOS image be used (users have reported success with \"COMPLEX 4627\"). Q: Why am I getting \"The guest has not initialized the display\"? \u00b6 This is likely due to a mismatch of MCPX and BIOS images. Q: Is there a game compatibility list? \u00b6 There is a compatibility list here , but this may not be up to date. We encourage users to test their games and help us discover issues. Q: Does XQEMU run my game's default.xbe? \u00b6 No, not directly. XQEMU emulates the hardware of the system, so you'll need to have a disc image of your game backup. You can use extract-xiso or qwix to create an image. Q: Does XQEMU support \"redump\" style ISOs? \u00b6 No, not yet. Please use extract-xiso to repack your ISO. Q: Why am I getting an \"Assertion failed!\" message when running XQEMU? \u00b6 When a game exercises a piece of code in XQEMU that has not yet been implemented or verified, XQEMU will assert which forces execution to stop. The reason for this is that anything happening beyond that point may be unpredictable and significantly increase the debugging burden.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#q-are-there-system-requirements","text":"There are not strict requirements, except that your graphics card should have a driver that supports OpenGL 3.3 core profile (or better). Most relatively modern laptops and desktops should be able to run XQEMU. XQEMU runs on all major operating systems. Please be aware that XQEMU has significant performance issues right now that are actively being addressed. Even with the best hardware, the master build runs very poorly. This will be fixed soon.","title":"Q: Are there system requirements?"},{"location":"faq/#q-is-there-a-gui","text":"Yes, please use XQEMU-Manager .","title":"Q: Is there a GUI?"},{"location":"faq/#q-how-can-i-get-the-xxx-build","text":"Developers may have experimental builds including exciting new features or bug fixes in their own repositories. While your testing is welcome, these are considired unofficial, experimental builds. For this reason, we do not link to them directly from the site, to avoid confusion.","title":"Q: How can I get the [xxx] build?"},{"location":"faq/#q-what-bios-do-i-need-to-use","text":"Your MCPX and BIOS dump should be for a 1.0 Xbox. It's suggested that your MCPX dump be 1.0 and that a compatible BIOS image be used (users have reported success with \"COMPLEX 4627\").","title":"Q: What BIOS do I need to use?"},{"location":"faq/#q-why-am-i-getting-the-guest-has-not-initialized-the-display","text":"This is likely due to a mismatch of MCPX and BIOS images.","title":"Q: Why am I getting \"The guest has not initialized the display\"?"},{"location":"faq/#q-is-there-a-game-compatibility-list","text":"There is a compatibility list here , but this may not be up to date. We encourage users to test their games and help us discover issues.","title":"Q: Is there a game compatibility list?"},{"location":"faq/#q-does-xqemu-run-my-games-defaultxbe","text":"No, not directly. XQEMU emulates the hardware of the system, so you'll need to have a disc image of your game backup. You can use extract-xiso or qwix to create an image.","title":"Q: Does XQEMU run my game's default.xbe?"},{"location":"faq/#q-does-xqemu-support-redump-style-isos","text":"No, not yet. Please use extract-xiso to repack your ISO.","title":"Q: Does XQEMU support \"redump\" style ISOs?"},{"location":"faq/#q-why-am-i-getting-an-assertion-failed-message-when-running-xqemu","text":"When a game exercises a piece of code in XQEMU that has not yet been implemented or verified, XQEMU will assert which forces execution to stop. The reason for this is that anything happening beyond that point may be unpredictable and significantly increase the debugging burden.","title":"Q: Why am I getting an \"Assertion failed!\" message when running XQEMU?"},{"location":"getting-started/","text":"Getting XQEMU \u00b6 Download for Windows: If you have a GitHub account, the latest pre-built release version of XQEMU for Windows can be downloaded here . Linux and macOS users will need to build XQEMU from source, see Building XQEMU from Source . Required Files \u00b6 XQEMU is a low-level, full-system emulator which emulates the actual hardware of the Xbox; this means that in order to actually run XQEMU, you must have a copy of the stuff that a real Xbox needs when it turns on: The MCPX Boot ROM image The flash ROM image (aka BIOS ) A properly-formatted hard disk drive image Game disc image(s) Unfortunately, distributing some of these items would violate copyright laws, so you'll need to acquire them on your own. Attention The XQEMU project does not endorse or promote piracy. We don't link to copyrighted files, or discuss how to acquire them. The only legal way to acquire these files is to dump them from your real, physical Xbox . Please don't ask us how to get them. MCPX Boot ROM Image \u00b6 MD5 (mcpx_1.0.bin) = d49c52a4102f6df7bcf8d0617ac475ed If your MCPX dump has an MD5 of 196a5f59a13382c185636e691d6c323d , you dumped it badly and it's a couple of bytes off. It should start with 0x33 0xC0 and end with 0x02 0xEE . Flash ROM Image (aka BIOS/Kernel) \u00b6 Xbox 1.0 compatible BIOS (cromwell, 4034, 4036, ...). You can use a retail or debug image. Just like a real Xbox, running an unmodified retail BIOS will not allow booting unofficial software. People have reported most success using the modified \"COMPLEX 4627\" BIOS (retail version). Hard Disk Drive Image \u00b6 You have options: Option 1: Use a pre-built Xbox HDD image (recommended) \u00b6 You can use a pre-built 8G Xbox HDD image, free of any copyrighted content, and only containing a dummy dashboard. You can download this image from here! Note By design, this particular drive image does not contain the official Xbox dashboard, but instead contains only a dummy dashboard. Because of this, you may see an error message when starting XQEMU with an unmodified retail BIOS image due to the system failing to find a properly signed dashboard. If you would like to change your dashboard (perhaps to the official retail dashboard, or any alternative dashboard), or copy additional files over to the Xbox HDD, you can start XQEMU, using a modified BIOS image, and a disc containing an alternative dashboard. Then you can either install that dashboard, or connect to XQEMU using FTP to transfer your desired dashboard files to the HDD. Option 2: Image your real Xbox HDD \u00b6 This is the most authentic way to do it. Unlock your drive, connect it to a computer, and dd the entire contents of the drive straight to a file. This file can be used as-is with XQEMU. Option 3: Build a new HDD image from scratch \u00b6 You can also create an Xbox hard-disk image using XboxHDM. Directions on how to do this can be found here . Running XQEMU \u00b6 XQEMU is launchable via the command-line interface, or through the XQEMU-Manager GUI . Using XQEMU-Manager \u00b6 XQEMU-Manager is a simple application with a graphical interface that allows you to easily configure, launch, and control XQEMU. Currently it is distributed separately from the main XQEMU executable. A binary distribution of XQEMU-Manager for Windows is available here . Upon starting XQEMU-Manager, you will be presented with the following interface: You will need to edit your configuration to let XQEMU-Manager know where XQEMU is located, and where to find the files described above. Navigate to Edit \u2192 Settings and you will be presented with the following dialog: After configuring your settings, close the settings dialog and click the Start button to launch XQEMU. Using the Command-Line Interface \u00b6 You can launch with the following command: ./i386-softmmu/qemu-system-i386 \\ -cpu pentium3 \\ -machine xbox,bootrom=$MCPX \\ -m 64 \\ -bios $BIOS \\ -drive index=0,media=disk,file=$HDD,locked \\ -drive index=1,media=cdrom,file=$DISC \\ -usb -device usb-xbox-gamepad Of course, on Windows the executable path will have a .exe extension. If launching a pre-built binary, replace ./i386-softmmu/qemu-system-i386 with xqemu.exe . Replace the variables $MCPX , $BIOS , $HDD , and $DISC with the appropriate file paths or define them as variables in your shell. The Xbox boot animation sequence can be bypassed by adding the ,short-animation option to the -machine switch above.","title":"Getting Started"},{"location":"getting-started/#getting-xqemu","text":"Download for Windows: If you have a GitHub account, the latest pre-built release version of XQEMU for Windows can be downloaded here . Linux and macOS users will need to build XQEMU from source, see Building XQEMU from Source .","title":"Getting XQEMU"},{"location":"getting-started/#required-files","text":"XQEMU is a low-level, full-system emulator which emulates the actual hardware of the Xbox; this means that in order to actually run XQEMU, you must have a copy of the stuff that a real Xbox needs when it turns on: The MCPX Boot ROM image The flash ROM image (aka BIOS ) A properly-formatted hard disk drive image Game disc image(s) Unfortunately, distributing some of these items would violate copyright laws, so you'll need to acquire them on your own. Attention The XQEMU project does not endorse or promote piracy. We don't link to copyrighted files, or discuss how to acquire them. The only legal way to acquire these files is to dump them from your real, physical Xbox . Please don't ask us how to get them.","title":"Required Files"},{"location":"getting-started/#mcpx-boot-rom-image","text":"MD5 (mcpx_1.0.bin) = d49c52a4102f6df7bcf8d0617ac475ed If your MCPX dump has an MD5 of 196a5f59a13382c185636e691d6c323d , you dumped it badly and it's a couple of bytes off. It should start with 0x33 0xC0 and end with 0x02 0xEE .","title":"MCPX Boot ROM Image"},{"location":"getting-started/#flash-rom-image-aka-bioskernel","text":"Xbox 1.0 compatible BIOS (cromwell, 4034, 4036, ...). You can use a retail or debug image. Just like a real Xbox, running an unmodified retail BIOS will not allow booting unofficial software. People have reported most success using the modified \"COMPLEX 4627\" BIOS (retail version).","title":"Flash ROM Image (aka BIOS/Kernel)"},{"location":"getting-started/#hard-disk-drive-image","text":"You have options:","title":"Hard Disk Drive Image"},{"location":"getting-started/#option-1-use-a-pre-built-xbox-hdd-image-recommended","text":"You can use a pre-built 8G Xbox HDD image, free of any copyrighted content, and only containing a dummy dashboard. You can download this image from here! Note By design, this particular drive image does not contain the official Xbox dashboard, but instead contains only a dummy dashboard. Because of this, you may see an error message when starting XQEMU with an unmodified retail BIOS image due to the system failing to find a properly signed dashboard. If you would like to change your dashboard (perhaps to the official retail dashboard, or any alternative dashboard), or copy additional files over to the Xbox HDD, you can start XQEMU, using a modified BIOS image, and a disc containing an alternative dashboard. Then you can either install that dashboard, or connect to XQEMU using FTP to transfer your desired dashboard files to the HDD.","title":"Option 1: Use a pre-built Xbox HDD image (recommended)"},{"location":"getting-started/#option-2-image-your-real-xbox-hdd","text":"This is the most authentic way to do it. Unlock your drive, connect it to a computer, and dd the entire contents of the drive straight to a file. This file can be used as-is with XQEMU.","title":"Option 2: Image your real Xbox HDD"},{"location":"getting-started/#option-3-build-a-new-hdd-image-from-scratch","text":"You can also create an Xbox hard-disk image using XboxHDM. Directions on how to do this can be found here .","title":"Option 3: Build a new HDD image from scratch"},{"location":"getting-started/#running-xqemu","text":"XQEMU is launchable via the command-line interface, or through the XQEMU-Manager GUI .","title":"Running XQEMU"},{"location":"getting-started/#using-xqemu-manager","text":"XQEMU-Manager is a simple application with a graphical interface that allows you to easily configure, launch, and control XQEMU. Currently it is distributed separately from the main XQEMU executable. A binary distribution of XQEMU-Manager for Windows is available here . Upon starting XQEMU-Manager, you will be presented with the following interface: You will need to edit your configuration to let XQEMU-Manager know where XQEMU is located, and where to find the files described above. Navigate to Edit \u2192 Settings and you will be presented with the following dialog: After configuring your settings, close the settings dialog and click the Start button to launch XQEMU.","title":"Using XQEMU-Manager"},{"location":"getting-started/#using-the-command-line-interface","text":"You can launch with the following command: ./i386-softmmu/qemu-system-i386 \\ -cpu pentium3 \\ -machine xbox,bootrom=$MCPX \\ -m 64 \\ -bios $BIOS \\ -drive index=0,media=disk,file=$HDD,locked \\ -drive index=1,media=cdrom,file=$DISC \\ -usb -device usb-xbox-gamepad Of course, on Windows the executable path will have a .exe extension. If launching a pre-built binary, replace ./i386-softmmu/qemu-system-i386 with xqemu.exe . Replace the variables $MCPX , $BIOS , $HDD , and $DISC with the appropriate file paths or define them as variables in your shell. The Xbox boot animation sequence can be bypassed by adding the ,short-animation option to the -machine switch above.","title":"Using the Command-Line Interface"},{"location":"input/","text":"XQEMU currently supports three options for connecting one or more virtual gamepads: Using an SDL2-supported input device to emulate an Xbox controller Using your PC's keyboard to emulate an Xbox controller Using a real Xbox controller with USB pass-thru (advanced) And like a real Xbox, you can connect multiple controllers! In all cases, start by making sure you have the -usb option specified on the XQEMU command line. Option 1: Use an SDL2-supported input device \u00b6 This method is known to work well with Xbox 360 and DualShock 4 controllers, with little to no setup required (with the exception of installing any required platform drivers). When starting XQEMU, simply pass in the following option: -device usb-xbox-gamepad-sdl,index=0 If you have multiple gamepads connected to your system, you can change the index of the connected device by changing index=X accordingly. Multiple gamepads can be connected by specifying the line above multiple times. Option 2: Use your PC keyboard \u00b6 If you do not have access to a real gamepad, you can use your PC's keyboard to emulate an Xbox gamepad. This works well in a pinch, and for for navigating through menus. When starting XQEMU, simply pass in the following option: -device usb-xbox-gamepad If you'd like, you can combine this device with the usb-xbox-gamepad-sdl device to emulate connecting two controllers. The input can't be configured at the moment but the following buttons are mapped: Xbox PC Keyboard S D W E X C Return Backspace DPad -Up \u2191 DPad -Down \u2193 DPad -Left \u2190 DPad -Right \u2192 Left Trigger Q Right Trigger R Left-Thumbstick -Up T Left-Thumbstick -Down G Left-Thumbstick -Left F Left-Thumbstick -Right H Left-Thumbstick -Press V Right-Thumbstick -Up I Right-Thumbstick -Down K Right-Thumbstick -Left J Right-Thumbstick -Right L Right-Thumbstick -Press M Option 3: USB-passthru (advanced) \u00b6 XQEMU has the option to forward USB Devices from the host to the guest. The input might be delayed, but it will support all features you'd expect. In theory even memory units or the communicator should work! You have 2 options to forward the Xbox gamepad. You can either forward the hub or just the gamepad. To be able to forward any of the host devices you must take the following steps: Have an adapter cable (this one has not been tested yet!) or build one yourself* Have libusb installed Find the VID:PID (Vendor and Product ID) of the XID-Hub and/or the internal Gamepad device Make sure that libusb has the necessary permissions Important Please do not destroy original controllers. Instead buy an adapter cable, or a cheap break-away or extension cable. By cutting it in half you can create 2 USB adapters: 1. USB to Xbox + 2. Xbox to USB. You can still use your adapters as an extension cable for most XIDs (not working with lightguns). On Linux you can use lsusb for step 2. Step 3 involves adding a udev rule on most linux distributions. The udev rule (/etc/udev/rules.d/999-xbox- gamepad.rules) for a Controller-S could look like this: # Duke (Hub; Gamepad) SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"045e\", ATTRS{idProduct}==\"001c\", GROUP=\"users\", MODE=\"660\" SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"045e\", ATTRS{idProduct}==\"0202\", GROUP=\"users\", MODE=\"660\" # Controller S (Hub; Gamepad) SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"045e\", ATTRS{idProduct}==\"0288\", GROUP=\"users\", MODE=\"660\" SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"045e\", ATTRS{idProduct}==\"0289\", GROUP=\"users\", MODE=\"660\" Hub-Forwarding \u00b6 To forward the entire hub of the controller we simply have to forward the hub to the emulated Xbox. Example: -usb -device usb-host,bus=usb-bus.0,port=3,vendorid=0x45e,productid=0x288 Gamepad-Forwarding \u00b6 For Gamepad forwarding we create a virtual hub using QEMU and connect the XID gamepad device to port 2 of the emulated hub. Example: -usb -device usb-hub,bus=usb-bus.0,port=3 -device usb-host,vendorid=0x45e,productid=0x289,bus=usb-bus.0,port=3.2 Advanced Info \u00b6 About XID and QEMU USB \u00b6 The Xbox uses so called Xbox Input Devices (XID) . To connect a device to the virtual Xbox you must specify the driver for the emulated USB device and the port the device should connect to. The ports which can be used in XQEMU are: Xbox Port XQEMU USB-Port Player 1 bus=usb-bus.0,port=3 Player 2 bus=usb-bus.0,port=4 Player 3 bus=usb-bus.0,port=1 Player 4 bus=usb-bus.0,port=2 The XID is usually connected to Port 2 of the XID-hub. So if you have a hub for Player 1 at bus=usb-bus.0,port=3 , your gamepad-device would connect to bus =usb-bus.0,port=3.2 . To connect multiple gamepads you can simply specify multiple -device . To find out more about QEMU USB emulation you can read the QEMU User Documentation . Emulated XID \u00b6 There is XID emulation in XQEMU which emulates a very basic Duke Xbox Controller (VID: 0x045e, PID: 0x0202). To recreate the internal XID hub we use the existing QEMU \"usb-hub\" device. The actual XID emulation is provided by the \"xbox-gamepad\" device. Example: -usb -device usb-hub,bus=usb-bus.0,port=3 -device usb-xbox-gamepad,bus=usb-bus.0,port=3.2","title":"Input Devices"},{"location":"input/#option-1-use-an-sdl2-supported-input-device","text":"This method is known to work well with Xbox 360 and DualShock 4 controllers, with little to no setup required (with the exception of installing any required platform drivers). When starting XQEMU, simply pass in the following option: -device usb-xbox-gamepad-sdl,index=0 If you have multiple gamepads connected to your system, you can change the index of the connected device by changing index=X accordingly. Multiple gamepads can be connected by specifying the line above multiple times.","title":"Option 1: Use an SDL2-supported input device"},{"location":"input/#option-2-use-your-pc-keyboard","text":"If you do not have access to a real gamepad, you can use your PC's keyboard to emulate an Xbox gamepad. This works well in a pinch, and for for navigating through menus. When starting XQEMU, simply pass in the following option: -device usb-xbox-gamepad If you'd like, you can combine this device with the usb-xbox-gamepad-sdl device to emulate connecting two controllers. The input can't be configured at the moment but the following buttons are mapped: Xbox PC Keyboard S D W E X C Return Backspace DPad -Up \u2191 DPad -Down \u2193 DPad -Left \u2190 DPad -Right \u2192 Left Trigger Q Right Trigger R Left-Thumbstick -Up T Left-Thumbstick -Down G Left-Thumbstick -Left F Left-Thumbstick -Right H Left-Thumbstick -Press V Right-Thumbstick -Up I Right-Thumbstick -Down K Right-Thumbstick -Left J Right-Thumbstick -Right L Right-Thumbstick -Press M","title":"Option 2: Use your PC keyboard"},{"location":"input/#option-3-usb-passthru-advanced","text":"XQEMU has the option to forward USB Devices from the host to the guest. The input might be delayed, but it will support all features you'd expect. In theory even memory units or the communicator should work! You have 2 options to forward the Xbox gamepad. You can either forward the hub or just the gamepad. To be able to forward any of the host devices you must take the following steps: Have an adapter cable (this one has not been tested yet!) or build one yourself* Have libusb installed Find the VID:PID (Vendor and Product ID) of the XID-Hub and/or the internal Gamepad device Make sure that libusb has the necessary permissions Important Please do not destroy original controllers. Instead buy an adapter cable, or a cheap break-away or extension cable. By cutting it in half you can create 2 USB adapters: 1. USB to Xbox + 2. Xbox to USB. You can still use your adapters as an extension cable for most XIDs (not working with lightguns). On Linux you can use lsusb for step 2. Step 3 involves adding a udev rule on most linux distributions. The udev rule (/etc/udev/rules.d/999-xbox- gamepad.rules) for a Controller-S could look like this: # Duke (Hub; Gamepad) SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"045e\", ATTRS{idProduct}==\"001c\", GROUP=\"users\", MODE=\"660\" SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"045e\", ATTRS{idProduct}==\"0202\", GROUP=\"users\", MODE=\"660\" # Controller S (Hub; Gamepad) SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"045e\", ATTRS{idProduct}==\"0288\", GROUP=\"users\", MODE=\"660\" SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"045e\", ATTRS{idProduct}==\"0289\", GROUP=\"users\", MODE=\"660\"","title":"Option 3: USB-passthru (advanced)"},{"location":"input/#hub-forwarding","text":"To forward the entire hub of the controller we simply have to forward the hub to the emulated Xbox. Example: -usb -device usb-host,bus=usb-bus.0,port=3,vendorid=0x45e,productid=0x288","title":"Hub-Forwarding"},{"location":"input/#gamepad-forwarding","text":"For Gamepad forwarding we create a virtual hub using QEMU and connect the XID gamepad device to port 2 of the emulated hub. Example: -usb -device usb-hub,bus=usb-bus.0,port=3 -device usb-host,vendorid=0x45e,productid=0x289,bus=usb-bus.0,port=3.2","title":"Gamepad-Forwarding"},{"location":"input/#advanced-info","text":"","title":"Advanced Info"},{"location":"input/#about-xid-and-qemu-usb","text":"The Xbox uses so called Xbox Input Devices (XID) . To connect a device to the virtual Xbox you must specify the driver for the emulated USB device and the port the device should connect to. The ports which can be used in XQEMU are: Xbox Port XQEMU USB-Port Player 1 bus=usb-bus.0,port=3 Player 2 bus=usb-bus.0,port=4 Player 3 bus=usb-bus.0,port=1 Player 4 bus=usb-bus.0,port=2 The XID is usually connected to Port 2 of the XID-hub. So if you have a hub for Player 1 at bus=usb-bus.0,port=3 , your gamepad-device would connect to bus =usb-bus.0,port=3.2 . To connect multiple gamepads you can simply specify multiple -device . To find out more about QEMU USB emulation you can read the QEMU User Documentation .","title":"About XID and QEMU USB"},{"location":"input/#emulated-xid","text":"There is XID emulation in XQEMU which emulates a very basic Duke Xbox Controller (VID: 0x045e, PID: 0x0202). To recreate the internal XID hub we use the existing QEMU \"usb-hub\" device. The actual XID emulation is provided by the \"xbox-gamepad\" device. Example: -usb -device usb-hub,bus=usb-bus.0,port=3 -device usb-xbox-gamepad,bus=usb-bus.0,port=3.2","title":"Emulated XID"},{"location":"networking/","text":"Networking Options \u00b6 XQEMU emulates the Xbox network controller (nvnet), and being built on top of QEMU's robust networking support infrastructure, provides a flexible array of advanced network configuration options including: Socket networking, for connecting multiple running instances of XQEMU for possible networked game play. Tap networking, for bridging a physical network device for play with real Xboxes or other applications. User networking, for simple network use where only basic port-forwarding is required. This page contains some quick tips for common use cases regarding Xbox emulation. Additional details about networking configuration information is available in the official QEMU documentation . Bridged Networking \u00b6 Windows \u00b6 Requirements - OpenVPN TAP Driver (Download \u201cTap-Windows\u201d) Install the prerequisites then you\u2019ll need to manually bridge your main adapter and the newly created TAP adapter. This is easily done by going to Network & Sharing Center then Change adapter settings . The command line options are very similar to Linux however you\u2019ll need to change the ifname=tap0 to what ever Windows or yourself had set the name of the new TAP adapter to be. -net nic,model=nvnet -net tap,ifname=\"Ethernet 2\",script=no In this example the interface name is Ethernet 2 . Note When using the standalone/downloadable version of XQEMU you cannot have a space in the TAP adapter name. Linux \u00b6 Requirements - uml-utilities - bridge-utils By running this script via sudo before start-up of XQEMU you\u2019ll have set-up the bridge and tap adapters that are required for networking. You will however need to modify it slightly to include the main ethernet adaptor and the user account you\u2019ll be running XQEMU on. #!/bin/bash brctl addbr br0 ip addr flush dev <interface or eth0> brctl addif br0 <interface or eth0> tunctl -t tap0 -u <youruseracc> brctl addif br0 tap0 ifconfig <interface or eth0> up ifconfig tap0 up ifconfig br0 up dhclient -v br0 Once that runs and you don\u2019t see any errors you should be able to just run XQEMU with the additional command line option of -net nic,model=nvnet -net tap,ifname=tap0,script=no .","title":"Networking"},{"location":"networking/#networking-options","text":"XQEMU emulates the Xbox network controller (nvnet), and being built on top of QEMU's robust networking support infrastructure, provides a flexible array of advanced network configuration options including: Socket networking, for connecting multiple running instances of XQEMU for possible networked game play. Tap networking, for bridging a physical network device for play with real Xboxes or other applications. User networking, for simple network use where only basic port-forwarding is required. This page contains some quick tips for common use cases regarding Xbox emulation. Additional details about networking configuration information is available in the official QEMU documentation .","title":"Networking Options"},{"location":"networking/#bridged-networking","text":"","title":"Bridged Networking"},{"location":"networking/#windows","text":"Requirements - OpenVPN TAP Driver (Download \u201cTap-Windows\u201d) Install the prerequisites then you\u2019ll need to manually bridge your main adapter and the newly created TAP adapter. This is easily done by going to Network & Sharing Center then Change adapter settings . The command line options are very similar to Linux however you\u2019ll need to change the ifname=tap0 to what ever Windows or yourself had set the name of the new TAP adapter to be. -net nic,model=nvnet -net tap,ifname=\"Ethernet 2\",script=no In this example the interface name is Ethernet 2 . Note When using the standalone/downloadable version of XQEMU you cannot have a space in the TAP adapter name.","title":"Windows"},{"location":"networking/#linux","text":"Requirements - uml-utilities - bridge-utils By running this script via sudo before start-up of XQEMU you\u2019ll have set-up the bridge and tap adapters that are required for networking. You will however need to modify it slightly to include the main ethernet adaptor and the user account you\u2019ll be running XQEMU on. #!/bin/bash brctl addbr br0 ip addr flush dev <interface or eth0> brctl addif br0 <interface or eth0> tunctl -t tap0 -u <youruseracc> brctl addif br0 tap0 ifconfig <interface or eth0> up ifconfig tap0 up ifconfig br0 up dhclient -v br0 Once that runs and you don\u2019t see any errors you should be able to just run XQEMU with the additional command line option of -net nic,model=nvnet -net tap,ifname=tap0,script=no .","title":"Linux"},{"location":"screenshots/","text":"Disclaimer These screenshots represent the absolute best of what can currently be made to run and is not representative of most titles. Check out the official XQEMU project YouTube channel for development updates. Halo: Combat Evolved \u00b6 Campaign \u00b6 Note: Debug Build, Accelerated 4x Multiplayer: Blood Gulch (System Link) \u00b6 Multiplayer: Blood Gulch, Battle Creek (Split Screen) \u00b6 Note: Debug Build, Realtime, June 20 th Jet Set Radio Future \u00b6 Serious Sam II \u00b6 Commit 5d4058d . Recorded by John GodGames, thanks! Mechassult \u00b6 Taken by MayeulC, thanks! Tony Hawk's Pro Skater 2x \u00b6 Note: Debug Build, Realtime","title":"Screenshots"},{"location":"screenshots/#halo-combat-evolved","text":"","title":"Halo: Combat Evolved"},{"location":"screenshots/#campaign","text":"Note: Debug Build, Accelerated 4x","title":"Campaign"},{"location":"screenshots/#multiplayer-blood-gulch-system-link","text":"","title":"Multiplayer: Blood Gulch (System Link)"},{"location":"screenshots/#multiplayer-blood-gulch-battle-creek-split-screen","text":"Note: Debug Build, Realtime, June 20 th","title":"Multiplayer: Blood Gulch, Battle Creek (Split Screen)"},{"location":"screenshots/#jet-set-radio-future","text":"","title":"Jet Set Radio Future"},{"location":"screenshots/#serious-sam-ii","text":"Commit 5d4058d . Recorded by John GodGames, thanks!","title":"Serious Sam II"},{"location":"screenshots/#mechassult","text":"Taken by MayeulC, thanks!","title":"Mechassult"},{"location":"screenshots/#tony-hawks-pro-skater-2x","text":"Note: Debug Build, Realtime","title":"Tony Hawk's Pro Skater 2x"},{"location":"tips/","text":"Connect to an FTP server hosted inside XQEMU \u00b6 Writing files to your Xbox's HDD is currently a pain. It will be easy once the fatx driver has write capabilities, but until then you have the option of connecting over FTP to a server hosted inside XQEMU. Run XQEMU as normal, but add option to forward to port 21 inside VM as follows: -net nic,model=nvnet -net user,hostfwd=tcp:127.0.0.1:1021-:21 It's assumed you're using Filezilla. If not, look for the respective settings in your client. Fire up Filezilla and set the following options: Filezilla > Settings > Connection > FTP > Active mode Active mode IP, \"Use the following IP address:\" 10.0.2.2 Make sure \"Don't use external IP address on local connections.\" is NOT checked Then create your new \"Site\" with IP address 127.0.0.1 and port 1021. Under Transfer Settings, check Active. Details for the curious \u00b6 FTP has two modes, passive and active. Passive mode involves the client first connecting to the server for control and then again on another port other for data. The client first connects, then the server gives it another address and port to connect to for data. The first problem with this is that the server reports to the client the only IP address that it knows (10.0.2.15) which is not correct for our needs--we need 127.0.0.1. That's alright because we can override this in Filezilla. The second problem is that we don't know which port the server is going to choose, so we can't forward it ahead of time. In active mode, the client first connects to the server, then the server connects to the client! The client needs to give the IP address for the server to connect to. By default, it will give your computer's IP address, but the guest cannot connect to using that IP. So instead we need to override this setting and provide the IP address that the guest should connect to to actually connect to the host, which is 10.0.2.2.","title":"Tips"},{"location":"tips/#connect-to-an-ftp-server-hosted-inside-xqemu","text":"Writing files to your Xbox's HDD is currently a pain. It will be easy once the fatx driver has write capabilities, but until then you have the option of connecting over FTP to a server hosted inside XQEMU. Run XQEMU as normal, but add option to forward to port 21 inside VM as follows: -net nic,model=nvnet -net user,hostfwd=tcp:127.0.0.1:1021-:21 It's assumed you're using Filezilla. If not, look for the respective settings in your client. Fire up Filezilla and set the following options: Filezilla > Settings > Connection > FTP > Active mode Active mode IP, \"Use the following IP address:\" 10.0.2.2 Make sure \"Don't use external IP address on local connections.\" is NOT checked Then create your new \"Site\" with IP address 127.0.0.1 and port 1021. Under Transfer Settings, check Active.","title":"Connect to an FTP server hosted inside XQEMU"},{"location":"tips/#details-for-the-curious","text":"FTP has two modes, passive and active. Passive mode involves the client first connecting to the server for control and then again on another port other for data. The client first connects, then the server gives it another address and port to connect to for data. The first problem with this is that the server reports to the client the only IP address that it knows (10.0.2.15) which is not correct for our needs--we need 127.0.0.1. That's alright because we can override this in Filezilla. The second problem is that we don't know which port the server is going to choose, so we can't forward it ahead of time. In active mode, the client first connects to the server, then the server connects to the client! The client needs to give the IP address for the server to connect to. By default, it will give your computer's IP address, but the guest cannot connect to using that IP. So instead we need to override this setting and provide the IP address that the guest should connect to to actually connect to the host, which is 10.0.2.2.","title":"Details for the curious"},{"location":"developers/","text":"Welcome, XQEMU Developers! \u00b6 Community \u00b6 Potential XQEMU developers are encouraged to join the XboxDev community, which focuses on research & development for the original Xbox. General discussion happens on the XboxDev Discord Server . XQEMU Development Chat: The project has a dedicated development-centric IRC channel at #xqemu on irc.libera.chat Repository Info \u00b6 This project is hosted on GitHub at github.com/xqemu/xqemu . Build Status \u00b6 Platform Build Status Windows macOS Ubuntu Building From Source Code \u00b6 For directions on how to build XQEMU from source, please refer to this page . Debugging Guest Code \u00b6 QEMU can host a gdb stub! Launch with -s -S , and with gdb run target remote localhost:1234 Protip: You can also attach to it with IDA if you're so inclined. You can then load in a database if you export it as a IDC script! XQEMU can emulate a XDK serial port (which with a debug bios hosts KD, as in this and this )! Launch with something like -device lpc47m157 -serial unix:/tmp/xserial,server . With some effort you can wrestle the unix socket into a vm for with WinDbg. There's also a very barebones perl KD client in scripts/windpl apitrace is useful for tracking down rendering bugs. Debugging XQEMU Itself \u00b6 Depending on the task at hand, it may be necessary to debug XQEMU itself. Windows \u00b6 The Visual Studio Code IDE can be used to launch and debug XQEMU. A sample launch.vs.json file which can be used to launch XQEMU from code can be found here . macOS \u00b6 Using Xcode \u00b6 Create a project, edit the \"Scheme\" to run the xqemu binary, then click the run button. Xcode has a nice GUI for analyzing the stack frame and looking at local variables to quickly track down bugs. You can also attach to running processes. Linux \u00b6 GDB works of course. Eclipse can also be used for those wanting a graphical source-level debugging solution. Debug BIOS \u00b6 People have reported success with the 'COMPLEX 4627' modified debug bios. It's convenient to note that this bios does not necessarily require a populated hard disk image to load an application from DVD (though an empty drive still needs to be attached), so you can skip the next step in some cases. v1.0.2 1M dump: MD5 (Complex_4627Debug.bin) = 19b5c6d3d42a707bba620634fe6d4baf or sometimes 1MB dump: MD5 (complex_4627debug.bin) = e8dd61cc6abdbd06aac185e371312dc1","title":"Welcome"},{"location":"developers/#welcome-xqemu-developers","text":"","title":"Welcome, XQEMU Developers!"},{"location":"developers/#community","text":"Potential XQEMU developers are encouraged to join the XboxDev community, which focuses on research & development for the original Xbox. General discussion happens on the XboxDev Discord Server . XQEMU Development Chat: The project has a dedicated development-centric IRC channel at #xqemu on irc.libera.chat","title":"Community"},{"location":"developers/#repository-info","text":"This project is hosted on GitHub at github.com/xqemu/xqemu .","title":"Repository Info"},{"location":"developers/#build-status","text":"Platform Build Status Windows macOS Ubuntu","title":"Build Status"},{"location":"developers/#building-from-source-code","text":"For directions on how to build XQEMU from source, please refer to this page .","title":"Building From Source Code"},{"location":"developers/#debugging-guest-code","text":"QEMU can host a gdb stub! Launch with -s -S , and with gdb run target remote localhost:1234 Protip: You can also attach to it with IDA if you're so inclined. You can then load in a database if you export it as a IDC script! XQEMU can emulate a XDK serial port (which with a debug bios hosts KD, as in this and this )! Launch with something like -device lpc47m157 -serial unix:/tmp/xserial,server . With some effort you can wrestle the unix socket into a vm for with WinDbg. There's also a very barebones perl KD client in scripts/windpl apitrace is useful for tracking down rendering bugs.","title":"Debugging Guest Code"},{"location":"developers/#debugging-xqemu-itself","text":"Depending on the task at hand, it may be necessary to debug XQEMU itself.","title":"Debugging XQEMU Itself"},{"location":"developers/#windows","text":"The Visual Studio Code IDE can be used to launch and debug XQEMU. A sample launch.vs.json file which can be used to launch XQEMU from code can be found here .","title":"Windows"},{"location":"developers/#macos","text":"","title":"macOS"},{"location":"developers/#using-xcode","text":"Create a project, edit the \"Scheme\" to run the xqemu binary, then click the run button. Xcode has a nice GUI for analyzing the stack frame and looking at local variables to quickly track down bugs. You can also attach to running processes.","title":"Using Xcode"},{"location":"developers/#linux","text":"GDB works of course. Eclipse can also be used for those wanting a graphical source-level debugging solution.","title":"Linux"},{"location":"developers/#debug-bios","text":"People have reported success with the 'COMPLEX 4627' modified debug bios. It's convenient to note that this bios does not necessarily require a populated hard disk image to load an application from DVD (though an empty drive still needs to be attached), so you can skip the next step in some cases. v1.0.2 1M dump: MD5 (Complex_4627Debug.bin) = 19b5c6d3d42a707bba620634fe6d4baf or sometimes 1MB dump: MD5 (complex_4627debug.bin) = e8dd61cc6abdbd06aac185e371312dc1","title":"Debug BIOS"},{"location":"developers/building/","text":"Building XQEMU from Source \u00b6 Windows \u00b6 Start by installing and setting up MSYS2 . Important After installing MSYS2, you'll need to open MSYS2 MinGW 64-bit to perform building. Otherwise, you may see build failures for cc.exe. Once MSYS2 has been installed, install all of the necessary packages by running: pacman -S git python3 make autoconf automake-wrapper \\ mingw-w64-x86_64-libtool mingw-w64-x86_64-gcc mingw-w64-x86_64-pkg-config \\ mingw-w64-x86_64-glib2 mingw-w64-x86_64-libepoxy \\ mingw-w64-x86_64-SDL2 mingw-w64-x86_64-pixman Important Build failures have been reported when the path to the XQEMU root directory contains spaces. Please make sure to not have any whitespace in your build path. E.g: C:\\Users\\User Name\\xqemu\\build.sh will not work. Clone the repo: git clone https://github.com/xqemu/xqemu.git Then change directory: cd xqemu And build using the build script: sh ./build.sh macOS \u00b6 First make sure you've installed the Homebrew package manager, then update and install necessary packages: brew update brew install libffi gettext glib pixman pkg-config autoconf pixman sdl2 libepoxy coreutils Clone the repo: git clone https://github.com/xqemu/xqemu.git Then change directory: cd xqemu And build using the build script: ./build.sh Linux \u00b6 Note These instructions were tested with Ubuntu 18.04. Depending on the Linux distribution being used, these instructions may vary. Install build deps: sudo apt-get update sudo apt-get install git build-essential pkg-config libsdl2-dev \\ libepoxy-dev zlib1g-dev libpixman-1-dev Then clone the repo: git clone https://github.com/xqemu/xqemu.git Then change directory: cd xqemu And build using the build script: ./build.sh --python=/usr/bin/python3","title":"Building"},{"location":"developers/building/#building-xqemu-from-source","text":"","title":"Building XQEMU from Source"},{"location":"developers/building/#windows","text":"Start by installing and setting up MSYS2 . Important After installing MSYS2, you'll need to open MSYS2 MinGW 64-bit to perform building. Otherwise, you may see build failures for cc.exe. Once MSYS2 has been installed, install all of the necessary packages by running: pacman -S git python3 make autoconf automake-wrapper \\ mingw-w64-x86_64-libtool mingw-w64-x86_64-gcc mingw-w64-x86_64-pkg-config \\ mingw-w64-x86_64-glib2 mingw-w64-x86_64-libepoxy \\ mingw-w64-x86_64-SDL2 mingw-w64-x86_64-pixman Important Build failures have been reported when the path to the XQEMU root directory contains spaces. Please make sure to not have any whitespace in your build path. E.g: C:\\Users\\User Name\\xqemu\\build.sh will not work. Clone the repo: git clone https://github.com/xqemu/xqemu.git Then change directory: cd xqemu And build using the build script: sh ./build.sh","title":"Windows"},{"location":"developers/building/#macos","text":"First make sure you've installed the Homebrew package manager, then update and install necessary packages: brew update brew install libffi gettext glib pixman pkg-config autoconf pixman sdl2 libepoxy coreutils Clone the repo: git clone https://github.com/xqemu/xqemu.git Then change directory: cd xqemu And build using the build script: ./build.sh","title":"macOS"},{"location":"developers/building/#linux","text":"Note These instructions were tested with Ubuntu 18.04. Depending on the Linux distribution being used, these instructions may vary. Install build deps: sudo apt-get update sudo apt-get install git build-essential pkg-config libsdl2-dev \\ libepoxy-dev zlib1g-dev libpixman-1-dev Then clone the repo: git clone https://github.com/xqemu/xqemu.git Then change directory: cd xqemu And build using the build script: ./build.sh --python=/usr/bin/python3","title":"Linux"}]}